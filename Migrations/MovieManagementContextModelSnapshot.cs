// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movie_Management_API.Models;

#nullable disable

namespace Movie_Management_API.Migrations
{
    [DbContext(typeof(MovieManagementContext))]
    partial class MovieManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres", (string)null);
                });

            modelBuilder.Entity("Movie_Management_API.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<string>("BookingType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ShowId")
                        .HasColumnType("int")
                        .HasColumnName("ShowID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("BookingId")
                        .HasName("PK__Bookings__73951ACD2D60E46C");

                    b.HasIndex("ShowId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Movie_Management_API.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GenreId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Movie_Management_API.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Poster")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Movie_Management_API.Models.Screen", b =>
                {
                    b.Property<int>("ScreenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ScreenID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScreenId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ScreenNo")
                        .HasColumnType("int");

                    b.Property<int>("TheatreId")
                        .HasColumnType("int")
                        .HasColumnName("TheatreID");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.HasKey("ScreenId");

                    b.HasIndex("TheatreId");

                    b.ToTable("Screens");
                });

            modelBuilder.Entity("Movie_Management_API.Models.SeatsBooked", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<string>("SeatNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("BookingId", "SeatNo");

                    b.ToTable("SeatsBooked", (string)null);
                });

            modelBuilder.Entity("Movie_Management_API.Models.ShowTime", b =>
                {
                    b.Property<int>("ShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShowID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("ScreenId")
                        .HasColumnType("int")
                        .HasColumnName("ScreenID");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasKey("ShowId");

                    b.HasIndex("MovieId");

                    b.HasIndex("ScreenId");

                    b.ToTable("ShowTimes");
                });

            modelBuilder.Entity("Movie_Management_API.Models.Theatre", b =>
                {
                    b.Property<int>("TheatreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TheatreID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TheatreId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TheatreId");

                    b.HasIndex("UserId");

                    b.ToTable("Theatres");
                });

            modelBuilder.Entity("Movie_Management_API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MovieGenre", b =>
                {
                    b.HasOne("Movie_Management_API.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie_Management_API.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Movie_Management_API.Models.Booking", b =>
                {
                    b.HasOne("Movie_Management_API.Models.ShowTime", "Show")
                        .WithMany("Bookings")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__ShowID__5CD6CB2B");

                    b.HasOne("Movie_Management_API.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__UserID__5BE2A6F2");

                    b.Navigation("Show");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movie_Management_API.Models.Screen", b =>
                {
                    b.HasOne("Movie_Management_API.Models.Theatre", "Theatre")
                        .WithMany("Screens")
                        .HasForeignKey("TheatreId")
                        .IsRequired()
                        .HasConstraintName("FK__Screens__Theatre__52593CB8");

                    b.Navigation("Theatre");
                });

            modelBuilder.Entity("Movie_Management_API.Models.SeatsBooked", b =>
                {
                    b.HasOne("Movie_Management_API.Models.Booking", "Booking")
                        .WithMany("SeatsBookeds")
                        .HasForeignKey("BookingId")
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Movie_Management_API.Models.ShowTime", b =>
                {
                    b.HasOne("Movie_Management_API.Models.Movie", "Movie")
                        .WithMany("ShowTimes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie_Management_API.Models.Screen", "Screen")
                        .WithMany("ShowTimes")
                        .HasForeignKey("ScreenId")
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Screen");
                });

            modelBuilder.Entity("Movie_Management_API.Models.Theatre", b =>
                {
                    b.HasOne("Movie_Management_API.Models.User", "User")
                        .WithMany("Theatres")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movie_Management_API.Models.Booking", b =>
                {
                    b.Navigation("SeatsBookeds");
                });

            modelBuilder.Entity("Movie_Management_API.Models.Movie", b =>
                {
                    b.Navigation("ShowTimes");
                });

            modelBuilder.Entity("Movie_Management_API.Models.Screen", b =>
                {
                    b.Navigation("ShowTimes");
                });

            modelBuilder.Entity("Movie_Management_API.Models.ShowTime", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Movie_Management_API.Models.Theatre", b =>
                {
                    b.Navigation("Screens");
                });

            modelBuilder.Entity("Movie_Management_API.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Theatres");
                });
#pragma warning restore 612, 618
        }
    }
}
